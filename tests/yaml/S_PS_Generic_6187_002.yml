pipelines:
  - name: pipeline_S_PS_Generic_6187_002
    configuration:
      nodePool: win_2019
    steps:
      - name: S_PS_Generic_6187_002_1
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
        execution:
          onExecute:
            - add_run_variables JFROG_CLI_BUILD_NUMBER=${run_id}
            - Set-Content -Path S_PS_Generic_6187_002.txt -Value ${run_id}
            - jfrog rt upload S_PS_Generic_6187_002.txt test-automation-generic-local --insecure-tls=$no_verify_ssl
            - jfrog rt build-publish --detailed-summary --insecure-tls=${no_verify_ssl} ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER} | Out-File output.json
            - Get-Content output.json
            - save_artifact_info buildInfo output.json -build-name ${JFROG_CLI_BUILD_NAME} -build-number ${JFROG_CLI_BUILD_NUMBER}
      - name: S_PS_Generic_6187_002_2
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          inputSteps:
            - name: S_PS_Generic_6187_002_1
        execution:
          onExecute:
            - |
              $buildInfoFilePath = (jfrog rt search "*/${JFROG_CLI_BUILD_NAME}/${run_id}*.json" | ConvertFrom-JSON)[0].path
              $artifactSha = (jfrog rt curl -XGET /api/storage/${buildInfoFilePath} | ConvertFrom-JSON).checksums.sha256
              if ( "${project_key}" -eq "" ) { $project="default" } else { $project="${project_key}" }
              $artifactPath = "${project}/${JFROG_CLI_BUILD_NAME}/${run_id}"
              $headers = @{}
              $headers['Authorization'] = "apiToken $builder_api_token"
              $stepArtifact = Invoke-RestMethod -Method Get -ContentType 'application/json' -Headers $headers -Uri "${pipelines_api_url}/stepArtifacts?artifactPath=${artifactPath}&artifactSha=${artifactSha}&artifactType=buildInfo" -UseBasicParsing
              jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${run_id}&artifacts=1"
              if ( $stepArtifact.artifactSha -ne $artifactSha ) { throw "SHA doesn't match" }

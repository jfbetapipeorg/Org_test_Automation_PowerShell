template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_PS_CreateReleaseBundle_6189_005_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory
      buildName: 'name'
      buildNumber: '1'
  - name: S_PS_CreateReleaseBundle_6189_005_ReleaseBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: s_distribution
      name: name
      version: '1'
  - name: S_PS_CreateReleaseBundle_6189_005_GitRepo
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: {{ .Values.GitHub.Org_test_Automation.path }}
      branches:
        include: {{gitBranch}}

pipelines:
  - name: pipeline_S_PS_CreateReleaseBundle_6189_005
    configuration:
      nodePool: win_2019
    steps:
      - name: S_PS_CreateReleaseBundle_6189_005_1
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          outputResources:
            - name: S_PS_CreateReleaseBundle_6189_005_BuildInfo
        execution:
          onExecute:
            - add_run_variables JFROG_CLI_BUILD_NUMBER=${run_id}
            - Set-Content -Path S_PS_CreateReleaseBundle_6189_005.txt -Value ${run_id}
            - jfrog rt upload S_PS_CreateReleaseBundle_6189_005.txt test-automation-generic-local --insecure-tls=$no_verify_ssl
            - jfrog rt build-publish --detailed-summary --insecure-tls=${no_verify_ssl} ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER} | Out-File output.json
            - save_artifact_info buildInfo output.json -build-name "$JFROG_CLI_BUILD_NAME" -build-number $JFROG_CLI_BUILD_NUMBER
            - write_output S_PS_CreateReleaseBundle_6189_005_BuildInfo buildName="$JFROG_CLI_BUILD_NAME" buildNumber="$JFROG_CLI_BUILD_NUMBER"

      - name: S_PS_CreateReleaseBundle_6189_005_2
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          inputSteps:
            - name: S_PS_CreateReleaseBundle_6189_005_1
          inputResources:
            - name: S_PS_CreateReleaseBundle_6189_005_GitRepo
        execution:
          onExecute:
            # Can't edit the buildinfo.json, so it has to be the signature.
            - jfrog rt search artifactory-pipe-info/S_PS_CreateReleaseBundle_6189_005/{{gitBranch}}/${run_number}/s-S_PS_CreateReleaseBundle_6189_005_1.json.sig
            - |
              $head_sig_path = (jfrog rt search artifactory-pipe-info/pipeline_S_PS_CreateReleaseBundle_6189_005/{{gitBranch}}/*/s-S_PS_CreateReleaseBundle_6189_005_1.json.sig | ConvertFrom-Json)[0].path
              Write-Output $head_sig_path
              jfrog rt upload $res_S_PS_CreateReleaseBundle_6189_005_GitRepo_resourcePath/tests/artifacts/invalidGPGSig $head_sig_path --quiet

      - name: S_PS_CreateReleaseBundle_6189_005_3
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: ${JFROG_CLI_BUILD_NAME}
          releaseBundleVersion: ${run_id}
          dryRun: false
          sign: true
          failOnValidate: false
          inputResources:
            - name: S_PS_CreateReleaseBundle_6189_005_BuildInfo
          outputResources:
            - name: S_PS_CreateReleaseBundle_6189_005_ReleaseBundle
          inputSteps:
            - name: S_PS_CreateReleaseBundle_6189_005_2

      - name: S_PS_CreateReleaseBundle_6189_005_4
        type: PowerShell
        configuration:
          inputResources:
            - name: S_PS_CreateReleaseBundle_6189_005_ReleaseBundle
        execution:
          onExecute:
            - Write-Output "Deleting distribution..."
            - |
              $distributionUrl = $res_S_PS_CreateReleaseBundle_6189_005_ReleaseBundle_sourceDistribution_url
              $encoded_auth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("${res_S_PS_CreateReleaseBundle_6189_005_ReleaseBundle_sourceDistribution_user}:${res_S_PS_CreateReleaseBundle_6189_005_ReleaseBundle_sourceDistribution_apikey}"))
              $releaseBundleName = (find_resource_variable "S_PS_CreateReleaseBundle_6189_005_ReleaseBundle" name)
              $releaseBundleVersion = (find_resource_variable "S_PS_CreateReleaseBundle_6189_005_ReleaseBundle" version)
              check_no_verify_ssl
              Set-Content -Path ${step_tmp_dir}\request.json -Value '{"dry_run": false, "distribution_rules": [{"site_name": "*"}], "on_success": "delete"}'
              $headers = @{'Authorization' = "Basic $encoded_auth";'Content-Type' = "application/json"}
              Invoke-WebRequest "${distributionUrl}/api/v1/distribution/${releaseBundleName}/${releaseBundleVersion}/delete" -Method Post -Headers $headers -TimeoutSec 60 -InFile "$step_tmp_dir\request.json" -ContentType 'application/json' -UseBasicParsing -OutFile "${step_tmp_dir}\response" -PassThru
              Remove-Item "$step_tmp_dir\request.json"
              $trackerId = (ConvertFrom-JSON (Get-Content "${step_tmp_dir}\response")).id
              if ("$trackerId" -eq "") { throw "Unable to track distribution without ID" }
              Remove-Item -Force "${step_tmp_dir}\response"
              while ( $True ) {
                try {
                  $Response = Invoke-WebRequest "${distributionUrl}/api/v1/release_bundle/${releaseBundleName}/${releaseBundleVersion}/distribution/${trackerId}" -Method Get -Headers $headers -TimeoutSec 60 -UseBasicParsing -OutFile "${step_tmp_dir}\response" -PassThru
                  $statusCode = $Response.StatusCode
                }
                catch {
                  $statusCode = $_.Exception.Response.StatusCode.value__
                }

                if ($statusCode -eq 404) {
                  break
                } elseif ($statusCode -gt 299) {
                  throw "Distribution returned $statusCode"
                }

                Start-Sleep -Seconds 5
              }
            - Write-Output "Checking resource..."
            - if ("$res_S_PS_CreateReleaseBundle_6189_005_ReleaseBundle_name" -ne "${JFROG_CLI_BUILD_NAME}") { throw "Wrong name" }
            - if ("$res_S_PS_CreateReleaseBundle_6189_005_ReleaseBundle_version" -ne "${run_id}") { throw "Wrong version" }
            - if ("$res_S_PS_CreateReleaseBundle_6189_005_ReleaseBundle_isSigned" -ne "true") { throw "Wrong isSigned" }

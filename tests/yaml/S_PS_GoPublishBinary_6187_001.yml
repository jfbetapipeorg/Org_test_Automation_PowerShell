template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_PS_GoPublishBinary_6187_001_GitRepo
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: {{ .Values.GitHub.Org_test_Automation_PowerShell.path }}
      branches:
        include: {{gitBranch}}

  - name: S_PS_GoPublishBinary_6187_001_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory

pipelines:
  - name: pipeline_S_PS_GoPublishBinary_6187_001
    configuration:
      nodePool: win_2019
    steps:
      - name: S_PS_GoPublishBinary_6187_001_1
        type: GoBuild
        configuration:
          inputResources:
            - name: S_PS_GoPublishBinary_6187_001_GitRepo
          integrations:
            - name: s_artifactory
          sourceLocation: "tests/Go/HelloWorld"
          resolverRepo: test-automation-go-virtual
        execution:
          onStart:
            - add_run_variables JFROG_CLI_BUILD_NUMBER=${run_id}
      - name: S_PS_GoPublishBinary_6187_001_2
        type: GoPublishBinary
        configuration:
          inputSteps:
            - name: S_PS_GoPublishBinary_6187_001_1
          outputResources:
            - name: S_PS_GoPublishBinary_6187_001_BuildInfo
          targetRepository: test-automation-go-local
          autoPublishBuildInfo: true
      - name: S_PS_GoPublishBinary_6187_001_3
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          inputResources:
            - name: S_PS_GoPublishBinary_6187_001_BuildInfo
        execution:
          onExecute:
            - |
              (jfrog rt curl -XGET "/api/build/${JFROG_CLI_BUILD_NAME}/${run_id}" | ConvertFrom-Json).buildInfo.modules | Where {$_.id -eq "pipeline_S_PS_GoPublishBinary_6187_001"} | ForEach { $artifact = $_.artifacts }
              $artifactPath = $artifact.path
              $artifactSha = $artifact.sha256
              $headers = @{ 'Authorization' = "apiToken $builder_api_token" }
              $stepArtifact = Invoke-RestMethod -Method Get -ContentType 'application/json' -Headers $headers -Uri "${pipelines_api_url}/stepArtifacts?artifactPath=${artifactPath}&artifactSha=${artifactSha}&artifactType=artifact" -UseBasicParsing
              jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${run_id}&artifacts=1"
              if ( $stepArtifact.artifactSha -ne $artifactSha ) { throw "SHA doesn't match" }
